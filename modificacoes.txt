1. Criação de um construtor para a classe Cliente (alteração nos arquivos Cliente.cpp, Cliente.hpp e main.cpp)
2. Criação de um construtor para as classes Encomenda, EncomendaRelampago e EncomendaNormal
3. Criação de metodo_normal e metodo_relampago: diferem apenas o tipo da encomenda -> possível ponto para refatoração
4. Criação dos clientes usando vetores (um vetor para cada informação contida por um cliente)
5. Criação das encomendas usando vetores (um vetor para cada tipo de encomenda + um vetor para cada informação contida na encomenda)
6. Função calcula() : uso da constante "taxa" na classe EncomendaRelampago

--------------------------------------------------------------------------------------------------------------------------------------

1. Criação e inicialização dos atributos da classe Cliente
Inicialmente, foi criado um construtor para a classe Cliente, responsável por inicializar todos os atributos da classe (NOME, ENDEREÇO, CIDADE, ESTADO, CEP). 
Dessa forma, utilizando o construtor, foram criados e inicializados todos os clientes presentes no arquivo original do projeto, a partir da criação de um vetor
de clientes. Para facilitar esse processo, cada sequência de atributos foi armazenada em um vetor correspondente (nomes, enderecos, cidades, estados e ceps). 

2. Criação e inicialização dos atributos das classes Encomenda, EncomendaNormal e EncomendaRelampago
Para criar e inicializar as encomendas, foi criado o construtor da classe Encomenda, que é empregado também nas subclasses EncomendaNormal e EncomendaRelampago.
Esse construtor inicializa os campos da classe (PESO, CUSTOkg, REMET, DEST, TOTAL). O campo TAXA é inicializado a partir do construtor específico de cada subclasse.
No caso, como definido previamente, a taxa associada a uma encomenda relâmpago é 0.25, enquanto não há taxa associada às encomendas normais. Sendo assim, utilizando
o atributo TAXA, é calculado o custo total (atributo TOTAL), a partir da função calcula(). Essa função está definida na superclasse Encomenda, e a diferenciação dos 
valores de retorno se dá a partir da taxa, definida pelo tipo de encomenda. 

3. Criação da função metodo()
A função metodo() engloba 3 comandos empregados para formatar as informações exibidas no relatório final das encomendas: a função print() - que, na superclasse, 
imprime o nome do remetente e do destinatário, e que, nas subclasses, imprime as informações da encomenda, que variam conforme o tipo -, a quebra de linha e o 
retorno do custo total (resultado da função calcula()). Devido a essa variação no comportamento da função print(), a função método() é implementada separadamente em 
cada subclasse (EncomendaNormal e EncomendaRelampago). 

4. Arquivo main.cpp
O arquivo em questão inicialmente define as constantes que serão utilizadas no programa (NUM_CLIENTES, NUM_NORMAIS e NUM_RELAMP). No escopo da função main, temos
primeiramente a definição das informações dos clientes e a criação dessas entidades, conforme procedimento detalhado em 1. Em seguida, são criados os vetores 
auxiliares "peso_normal" e "peso_relam", além das variáveis globais "custo_normal" e "custo_relam", que são usados para inicializar os atributos das encomendas.
Para cada tipo de encomenda, é criado um vetor da subclasse correspondente (EncomendaNormal e EncomendaRelampago) e os campos são inicializados com o uso dos 
construtores. Logo depois, ocorre a impressão do relatório de encomendas e o cálculo do custo total associado a cada tipo de encomenda. Para isso, são definidas 
as variáveis "custN" e "custR", que são incrementadas a partir da função metodo() aplicada ao vetor de encomendas normais e ao vetor de encomendas relâmpago, 
respectivamente.